// Code generated by go-swagger; DO NOT EDIT.

package currency_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewConvertParams creates a new ConvertParams object
// with the default values initialized.
func NewConvertParams() *ConvertParams {
	var ()
	return &ConvertParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewConvertParamsWithTimeout creates a new ConvertParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewConvertParamsWithTimeout(timeout time.Duration) *ConvertParams {
	var ()
	return &ConvertParams{

		timeout: timeout,
	}
}

// NewConvertParamsWithContext creates a new ConvertParams object
// with the default values initialized, and the ability to set a context for a request
func NewConvertParamsWithContext(ctx context.Context) *ConvertParams {
	var ()
	return &ConvertParams{

		Context: ctx,
	}
}

// NewConvertParamsWithHTTPClient creates a new ConvertParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewConvertParamsWithHTTPClient(client *http.Client) *ConvertParams {
	var ()
	return &ConvertParams{
		HTTPClient: client,
	}
}

/*ConvertParams contains all the parameters to send to the API endpoint
for the convert operation typically these are written to a http.Request
*/
type ConvertParams struct {

	/*FromCurrencyCode
	  The 3-letter currency code defined in ISO 4217.

	*/
	FromCurrencyCode string
	/*FromNanos
	  Number of nano (10^-9) units of the amount.
	The value must be between -999,999,999 and +999,999,999 inclusive.
	If `units` is positive, `nanos` must be positive or zero.
	If `units` is zero, `nanos` can be positive, zero, or negative.
	If `units` is negative, `nanos` must be negative or zero.
	For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.

	*/
	FromNanos *int32
	/*FromUnits
	  The whole units of the amount.
	For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.

	*/
	FromUnits *string
	/*ToCode
	  The 3-letter currency code defined in ISO 4217.

	*/
	ToCode string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the convert params
func (o *ConvertParams) WithTimeout(timeout time.Duration) *ConvertParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the convert params
func (o *ConvertParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the convert params
func (o *ConvertParams) WithContext(ctx context.Context) *ConvertParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the convert params
func (o *ConvertParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the convert params
func (o *ConvertParams) WithHTTPClient(client *http.Client) *ConvertParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the convert params
func (o *ConvertParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFromCurrencyCode adds the fromCurrencyCode to the convert params
func (o *ConvertParams) WithFromCurrencyCode(fromCurrencyCode string) *ConvertParams {
	o.SetFromCurrencyCode(fromCurrencyCode)
	return o
}

// SetFromCurrencyCode adds the fromCurrencyCode to the convert params
func (o *ConvertParams) SetFromCurrencyCode(fromCurrencyCode string) {
	o.FromCurrencyCode = fromCurrencyCode
}

// WithFromNanos adds the fromNanos to the convert params
func (o *ConvertParams) WithFromNanos(fromNanos *int32) *ConvertParams {
	o.SetFromNanos(fromNanos)
	return o
}

// SetFromNanos adds the fromNanos to the convert params
func (o *ConvertParams) SetFromNanos(fromNanos *int32) {
	o.FromNanos = fromNanos
}

// WithFromUnits adds the fromUnits to the convert params
func (o *ConvertParams) WithFromUnits(fromUnits *string) *ConvertParams {
	o.SetFromUnits(fromUnits)
	return o
}

// SetFromUnits adds the fromUnits to the convert params
func (o *ConvertParams) SetFromUnits(fromUnits *string) {
	o.FromUnits = fromUnits
}

// WithToCode adds the toCode to the convert params
func (o *ConvertParams) WithToCode(toCode string) *ConvertParams {
	o.SetToCode(toCode)
	return o
}

// SetToCode adds the toCode to the convert params
func (o *ConvertParams) SetToCode(toCode string) {
	o.ToCode = toCode
}

// WriteToRequest writes these params to a swagger request
func (o *ConvertParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param from.currency_code
	if err := r.SetPathParam("from.currency_code", o.FromCurrencyCode); err != nil {
		return err
	}

	if o.FromNanos != nil {

		// query param from.nanos
		var qrFromNanos int32
		if o.FromNanos != nil {
			qrFromNanos = *o.FromNanos
		}
		qFromNanos := swag.FormatInt32(qrFromNanos)
		if qFromNanos != "" {
			if err := r.SetQueryParam("from.nanos", qFromNanos); err != nil {
				return err
			}
		}

	}

	if o.FromUnits != nil {

		// query param from.units
		var qrFromUnits string
		if o.FromUnits != nil {
			qrFromUnits = *o.FromUnits
		}
		qFromUnits := qrFromUnits
		if qFromUnits != "" {
			if err := r.SetQueryParam("from.units", qFromUnits); err != nil {
				return err
			}
		}

	}

	// path param to_code
	if err := r.SetPathParam("to_code", o.ToCode); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
